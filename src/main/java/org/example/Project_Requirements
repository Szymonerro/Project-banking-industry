#install java ✔
#install maven ✔
#install intellij IDEA ✔
#install git ✔
#create java project based on maven ✔
#create account on github.com with your personal email. ✔
#create ssh key and add to the GitHub account ✔
#create public repository ✔
#push your project code with HW to the GitHub public repository ✔
#run and compile simple system.out app. ✔
#Print info about the user that should be passed to the main function as a parameter. ✔
#implement sort algorithm: bubbleSort ✔
#Compile and run the program from the command line using javac and java from JDK. ✔
#Create a class hierarchy (15 classes min): Bank ✔
#All classes must contain properties (minimum 1) ✔
#At least 5 private properties (in total, in any classes) ✔
#All private variables must have getters and setters. ✔        // removed only useless
#All classes should have at least one custom constructor ✔
#Create separate class with main() which will instantiate objects of implemented classes. ✔
#Use polymorphism with at least one abstract class ✔           // eg. Account, Card, Human, Transaction
#Create and override at least one abstract method. ✔           // isAdult method in Human class
#Use at protected modifier at least 5 times ✔                  // 2x Human class, 2x Card class, 2x Transaction class
#Override methods from class Object (toString(), hashcode(), equals()) for at least 3 classes from the hierarchy. ✔   // hashCode() and equals() methods are in Human class, toString for example: Customer, CreditCard classes.
  *!Add 5 interfaces to the existing hierarchy. ✔
#Use polymorphism with the abstract class and interface from the hierarchy. ✔    // eg. equals() or isAdult() method in Human abstract class, interface: LoanCalculator
#Create final class, method, variable. ✔                       // class: CheckBalance , methods: deposit and withdraw, variable: accountNumber
   Create a static block, method, variable.                       // block: , method: checkBalance, variables: accountMaintenanceFee, bankName
#Create 5 custom exceptions. ✔
#Handle exceptions in 2 ways. ✔                                // transfer method has both ways of exceptions included
#Use try-catch with resources. ✔                               // transfer method
#Log messages to the console, file. ✔
#libraries of log4j could be downloaded manually from maven central. ✔
#add them to your project in IDE (e.g. sample of instruction for IntelliJ Idea) ✔
#Add 5 collections to the hierarchy. ✔
#Create custom implementation of LinkedList with generic and use it in your project. ✔
#Move all projects to Maven. ✔
#Build jar file and deploy to the local repository. ✔
Add and use 2 Plugins.
Run mvn for different phases from the Maven lifecycle. Check the result.

Read text from the file and calculate the numbers of the unique words. Write the result to the file.
The main requirement is: using StringUtils and FileUtils to implement it with minimum lines of code.